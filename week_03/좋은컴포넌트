문제를 만나게 되었을 때 어떻게 해결할지 찾아보고 고민을 하면서 실력이 늘고 새로운 인사이트를 얻게 되는 것 같습니다. 최근 회사에서 다른 개발자 분이 개발한 코드를 건드려야할 일이 생겼습니다. 이때 새로운 기능을 추가하고 수정해야할 때 어디를 고쳐야할지 오랫동안 코드를 읽고 해당 코드를 찾아 수정했을 때, 예상하지 못한 곳에서 사이드 이펙트가 발생한 것을 보고 아키텍처와 클린코드에 대한 중요성을 알게된 적이 있습니다.

그 이후로 클린 아키텍처 책을 읽으면서 좋은 컴포넌트란 무엇인지 대략적인 감을 잡았는데, 이번 글에서는 제가 좋은 컴포넌트가 어떤건지 정의를 내려가며 읽었던 아티클들을 소개하고 제가 생각한 좋은 컴포넌트에 대해 말해보겠습니다.

뭐든지 공식문서가 최고라는 말이 있습니다. 리엑트 공식문서의 **React로 사고하기** 목차에서 어떻게 컴포넌트를 설계하는지 간단히 말하고 있습니다.

해당 페이지에서 중요한 내용만 뽑아 보았습니다.

- **단일 책임 원칙** 하나의 컴포넌트는 한 가지 일을 해야한다. 하나의 컴포넌트가 커지게 되면 작은 컴포넌트로 분리되어야한다.
- DRY(Don't repeat yourself) 재사용가능한 컴포넌트를 만들어라.
- 계층 구조 내에서 특정 state가 있어야하는 모든 컴포넌트들의 상위에 있는 컴포넌트에 state를 추가해라.


- `확장성` 있고 `재사용성` 이 있어야한다.
- `관심사를 분리` 하고 `단일책임` 을 가져야한다.
- 외부에 `제어를 위임` 시켜야 한다.

****컴포넌트****

우리는 이제 리액트가 제공하는 자유로움 아래서 리액트 프로젝트를 잘 설계하는 원칙을 세워야 한다. 리액트를 잘 설계하기 위해서는 우선 컴포넌트에 대한 이해가 필요하다.

컴포넌트는 컴퓨터 소프트웨어에 있어서, 다시 사용할 수 있는 범용성을 위해 개발된 소프트웨어 구성 요소를 일컫는다. - wikipedia

리액트는 무수한 컴포넌트로 이뤄져 있다. 컴포넌트를 잘 설계하는 것이 리액트 프로젝트를 잘 설계하는 부분에 큰 비중을 차지한다. 사전적 정의에 따르면 컴포넌트는 재사용성과 범용성을 위해서 만들어져야 한다. 위에서 말한 의존성이 짙고 목적성이 사라진 코드의 문제는 컴포넌트의 특징을 무시한 채 재사용성과 범용성이 부족한 채 작업 되었기 때문이라고 생각한다. 우리는 작업 일정이나 귀찮음, 혹은 능력부족으로 인해 그때 그때 일이 생길때마다 코드의 line만 보고 여기 들어가면 무슨 동작이 되겠네 하고 작업을 하기 일쑤다. 그렇게 되면 컴포넌트는 재사용성과 범용성이 떨어진채로 여러 기능이 섞인 처치 불가 코드가 된다. 처치 불가 코드를 어떻게 살릴 수 있을지 또 어떻게 지양 할수 있을지 생각해보자

****관심사를 분리하고 단일책임으로 설계하기****

컴포넌트가 재사용성과 범용성을 가지기 위해서는 관심사에 따라 딱 한가지의 역할만 수행시키기를 권장한다. (이를 객체지향에서는 단일 책임 원칙이라고 한다.) 리액트 컴포넌트는 단순하게 보면 props를 받아서 DOM 렌더를 시키는 JSX를 리턴하는 함수이다. 프로그래밍에 순수함수라는 개념이 있다.

컴퓨터 프로그래밍에서 순수함수는 다음을 따른다
- 동일한 인자에는 항상 같은 값을 리턴한다.
- 사이드 이펙트를 내지 않는다

리액트 컴포넌트를 딱 한가지 역할만 수행시키기 위해 설계 하기 위해서는 순수함수의 특성과 같이 동일한 props를 받으면 같은 JSX 리턴하는 순수함수로 이뤄져야 한다.

예를들어 이미지를 받아서 유저 프로필 이미지를 그리는 컴포넌트가 있다고 하자. 이미지를 받아서 그릴 뿐 만 아니라 이미지가 없을때 랜덤 이미지까지 생성하는 컴포넌트라면 단일 책임 원칙을 깬다. 랜덤 이미지 생성은 컴포넌트의 본래 역할과 다른 비즈니스 로직이므로 해당 컴포넌트와 분리되어 개발 되어야 한다.  hooks를 이용하면 좀 더 편하게 비즈니스 로직을 외부로 분리 시킬 수 있다.

잘 격리하고 역할을 잘 정의해서 컴포넌트를 만들면 코드가 너무 광범위한 역할을 수행하고 복잡해지는 걸 방지해 준다. 단일 책임을 가지는 순수 컴포넌트들은 테스트하기 좋고 가독성도 좋다.

****제어 위임****

제어를 외부에 위임 할수록 컴포넌트의 유연성과 재사용성이 높아진다. 흔히 쓰는 부트스트랩이나 antd를 생각해보자. 필요한 props만 받아서 설정대로 움직이고 제어까지 setState를 받아서 해당 컴포넌트 제어가 가능하다. 핵심 로직은 해당 컴포넌트를 import한 컴포넌트에 의해서 제어가 된다.  마찬가지로 우리가 만드는 컴포넌트도 제어를 위임에 맡길수록 비지니스 로직을 맡는 컴포넌트에 import 해서 재사용이 가능해진다. 재사용이 가능한 부분들은 따로 다 빼서 컴포넌트로 만들거나 hooks로직에 담으면 더 좋은 컴포넌트를 만들 수 있다.  반면, 제어를 위임하면 할수록 위임한 코드를 사용 하는 코드에 대한 이해 난이도가 높아 가고, 가독성이 떨어진다는 문제도 있다. 위임과 사용 용이성의 중심을 잘 잡는게 중요하다.

****컴포넌트 설계 패턴****

컴포넌트를 역할과 관심사에 따라 분리 시키기 위해서는 코드 내부의 로직을 쪼개고 다른 코드로 위임을 해야된다. 제어를 위임하는 것의 문제는 쪼개고 위임 할수록 사용 코드에 대한 이해 난이도가 높아 가고, 가독성이 떨어진다 또, 커스텀 설정이 요구되는 경우가 많다. 이 역시 절대적인 것은 없고 개발자의 재량에 따라 최적을 찾아야 한다.


[리액트 설계 가이드](https://www.stevy.dev/react-design-guide)

[https://ui.toast.com/weekly-pick/ko_20200213](https://ui.toast.com/weekly-pick/ko_20200213)

[유용한 리액트 패턴 5가지](https://velog.io/@dnr6054/%EC%9C%A0%EC%9A%A9%ED%95%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%8C%A8%ED%84%B4-5%EA%B0%80%EC%A7%80)
